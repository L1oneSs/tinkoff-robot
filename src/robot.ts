/**
 * –í—Ö–æ–¥–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞.
 * –†–æ–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ñ–∏–≥–µ.
 */
import { CandlesLoader, RealAccount, SandboxAccount, TinkoffAccount, TinkoffInvestApi } from 'tinkoff-invest-api';
import { Logger, LogLevel } from '@vitalets/logger';
import { existsSync, mkdirSync } from 'fs';
import { Strategy, StrategyConfig } from './strategy.js';
import { Orders } from './account/orders.js';
import { Portfolio } from './account/portfolio.js';
import { TelegramNotifier } from './notifications/telegram.js';
import { TradeTracker } from './trade-tracker/index.js';
import { ReportScheduler } from './scheduler/index.js';

const { REAL_ACCOUNT_ID = '', SANDBOX_ACCOUNT_ID = '' } = process.env;

// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ account ID
const cleanRealAccountId = REAL_ACCOUNT_ID.trim();
const cleanSandboxAccountId = SANDBOX_ACCOUNT_ID.trim();

export interface RobotConfig {
  /** –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –∏–ª–∏ –ø–µ—Å–æ—á–Ω–∏—Ü—É */
  useRealAccount: boolean,
  /** –ó–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ */
  dryRun?: boolean;
  /** –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π */
  cacheDir?: string,
  /** –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è */
  logLevel?: string,
  /** –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ */
  strategies: StrategyConfig[],
  /** –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
  enableNotifications?: boolean;
}

const defaults: Pick<RobotConfig, 'dryRun' | 'cacheDir' | 'logLevel' | 'enableNotifications'> = {
  dryRun: false,
  cacheDir: (() => {
    // –í serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp –¥–ª—è –∫—ç—à–∞
    const isServerless = !!(
      process.env.AWS_LAMBDA_FUNCTION_NAME ||
      process.env._HANDLER ||
      process.env.LAMBDA_TASK_ROOT ||
      process.env.YANDEX_CLOUD_FUNCTION_NAME ||
      process.env.YANDEX_CLOUD_FUNCTION_VERSION
    );
    return isServerless ? '/tmp/.cache' : '.cache';
  })(),
  logLevel: 'info',
  enableNotifications: true,
};

export class Robot {
  config: RobotConfig;
  account: TinkoffAccount;
  candlesLoader: CandlesLoader;
  orders: Orders;
  portfolio: Portfolio;
  strategies: Strategy[];
  
  // –ú–æ–¥—É–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  telegramNotifier!: TelegramNotifier;
  tradeTracker!: TradeTracker;
  reportScheduler!: ReportScheduler;

  logger: Logger;

  constructor(public api: TinkoffInvestApi, config: RobotConfig) {
    this.config = Object.assign({}, defaults, config);
    this.logger = new Logger({ prefix: '[robot]:', level: this.config.logLevel as LogLevel });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π API (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞)
    this.account = config.useRealAccount
      ? new RealAccount(api, cleanRealAccountId)
      : new SandboxAccount(api, cleanSandboxAccountId);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
    this.initializeCache();
      
    this.candlesLoader = new CandlesLoader(api, { cacheDir: this.config.cacheDir });
    this.orders = new Orders(this);
    this.portfolio = new Portfolio(this);
    this.strategies = this.config.strategies.map(strategyConfig => new Strategy(this, strategyConfig));
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç—á–µ—Ç–æ–≤
    this.initializeModules();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–∫–∏ –∫—ç—à–∞
   */
  private initializeCache() {
    if (this.config.cacheDir) {
      try {
        if (!existsSync(this.config.cacheDir)) {
          mkdirSync(this.config.cacheDir, { recursive: true });
          this.logger.info(`–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –∫—ç—à–∞: ${this.config.cacheDir}`);
        }
      } catch (error) {
        this.logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∫—ç—à–∞ ${this.config.cacheDir}:`, error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å /tmp
        try {
          const tmpCacheDir = '/tmp/.cache';
          if (!existsSync(tmpCacheDir)) {
            mkdirSync(tmpCacheDir, { recursive: true });
            this.logger.info(`–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ø–∞–ø–∫–∞ –∫—ç—à–∞: ${tmpCacheDir}`);
          }
          this.config.cacheDir = tmpCacheDir;
        } catch (tmpError) {
          this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–∞–ø–∫—É –∫—ç—à–∞:', tmpError);
          // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
          this.config.cacheDir = undefined;
        }
      }
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private initializeModules() {
    this.telegramNotifier = new TelegramNotifier();
    this.tradeTracker = new TradeTracker();
    this.reportScheduler = new ReportScheduler(); // –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    
    if (this.config.enableNotifications) {
      this.logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
    }
    this.logger.info('–û—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö');
  }

  /**
   * –†–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Ä–æ–±–æ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
   * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
   */
  async runOnce() {
    this.logger.log(`–í—ã–∑–æ–≤ —Ä–æ–±–æ—Ç–∞ (${this.config.useRealAccount ? '–±–æ–µ–≤–æ–π —Å—á–µ—Ç' : '–ø–µ—Å–æ—á–Ω–∏—Ü–∞'})`);
    
    // –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    
    await this.portfolio.load();
    await this.orders.load();
    await this.runStrategies();
    this.logger.log(`–í—ã–∑–æ–≤ —Ä–æ–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω`);
  }

  // todo: –ó–∞–ø—É—Å–∫ —Ä–æ–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä–∏–º–∞.
  // async runStream(intervalMinutes = 1) {
  // - take figi from strategies
  // - load candles for all figi
  // - watch prices for all figi
  // }

  private async runStrategies() {
    const tasks = this.strategies.map(strategy => strategy.run());
    await Promise.all(tasks);
  }

  /**
   * –ó–∞–ø–∏—Å–∞—Ç—å —Å–¥–µ–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async recordTrade(tradeData: {
    figi: string;
    instrumentName: string;
    action: 'buy' | 'sell';
    quantity: number;
    price: number;
    totalAmount: number;
    commission: number;
    profit?: number;
    profitPercent?: number;
    signals: string[];
    triggerExpression?: string;
  }) {
    if (!this.config.enableNotifications) return;

    try {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
      const trade = this.tradeTracker.recordTrade(tradeData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      const notification = this.formatTradeNotification(trade);
      await this.telegramNotifier.sendMessage(notification);
      
      this.logger.info(`–ó–∞–ø–∏—Å–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ: ${trade.action} ${trade.instrumentName}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–¥–µ–ª–∫–∏:', error);
    }
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ
   */
  private formatTradeNotification(trade: any): string {
    const actionEmoji = trade.action === 'buy' ? 'üü¢' : 'üî¥';
    const actionText = trade.action === 'buy' ? '–ü–û–ö–£–ü–ö–ê' : '–ü–†–û–î–ê–ñ–ê';
    
    let message = `${actionEmoji} *${actionText}*\n\n`;
    message += `üìÑ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* ${trade.instrumentName}\n`;
    message += `üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${trade.quantity}\n`;
    message += `üí∞ *–¶–µ–Ω–∞:* ${trade.price.toFixed(2)} —Ä—É–±.\n`;
    message += `üíµ *–°—É–º–º–∞:* ${trade.totalAmount.toFixed(2)} —Ä—É–±.\n`;
    message += `üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* ${trade.commission.toFixed(2)} —Ä—É–±.\n`;
    
    if (trade.action === 'sell' && trade.profit !== undefined) {
      const profitEmoji = trade.profit >= 0 ? 'üìà' : 'üìâ';
      message += `${profitEmoji} *–ü—Ä–∏–±—ã–ª—å:* ${trade.profit.toFixed(2)} —Ä—É–±. (${trade.profitPercent?.toFixed(2)}%)\n`;
    }
    
    if (trade.signals.length > 0) {
      message += `üéØ *–°–∏–≥–Ω–∞–ª—ã:* ${trade.signals.join(', ')}\n`;
    }
    
    if (trade.triggerExpression) {
      message += `‚ö° *–¢—Ä–∏–≥–≥–µ—Ä:* \`${trade.triggerExpression}\`\n`;
    }
    
    message += `‚è∞ *–í—Ä–µ–º—è:* ${trade.timestamp.toLocaleString('ru-RU')}\n`;
    
    return message;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getSchedulerStatus(): string {
    return this.reportScheduler.getStatus();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç–æ—Ä–≥–æ–≤–æ–µ –ª–∏ –≤—Ä–µ–º—è
   */
  isTradingTime(): boolean {
    return this.reportScheduler.isTradingTime();
  }
}
