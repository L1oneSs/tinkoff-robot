/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
 */

import { createCanvas } from 'canvas';
import { Chart, registerables } from 'chart.js';
import { DailyStats, WeeklyStats, TradeRecord } from '../trade-tracker';
import { join } from 'path';
import { Logger } from '@vitalets/logger';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
Chart.register(...registerables);

export interface ReportConfig {
  includeCharts: boolean;
  chartWidth: number;
  chartHeight: number;
  outputDir: string;
}

export class ReportGenerator {
  private logger: Logger;
  private config: ReportConfig;

  constructor(config: Partial<ReportConfig> = {}) {
    this.logger = new Logger({ prefix: '[ReportGenerator]:', level: 'info' });
    this.config = {
      includeCharts: true,
      chartWidth: 800,
      chartHeight: 400,
      outputDir: join(process.cwd(), 'reports'),
      ...config,
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateDailyReport(stats: DailyStats): string {
    const profitEmoji = stats.totalProfit >= 0 ? 'üìà' : 'üìâ';
    const winRate = stats.sellTrades > 0 
      ? (stats.successfulTrades / stats.sellTrades * 100).toFixed(1) 
      : '0.0';
    
    let report = `ü§ñ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ ${stats.date}*\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    report += `üí∞ *–ü—Ä–∏–±—ã–ª—å:* ${stats.totalProfit.toFixed(2)} —Ä—É–±. ${profitEmoji}\n`;
    report += `üìä *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:* ${stats.totalProfitPercent.toFixed(2)}%\n`;
    report += `üîÑ *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* ${stats.totalTrades}\n`;
    report += `üì• *–ü–æ–∫—É–ø–æ–∫:* ${stats.buyTrades}\n`;
    report += `üì§ *–ü—Ä–æ–¥–∞–∂:* ${stats.sellTrades}\n`;
    report += `‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö:* ${stats.successfulTrades} (${winRate}%)\n`;
    report += `‚ùå *–£–±—ã—Ç–æ—á–Ω—ã—Ö:* ${stats.losingTrades}\n`;
    report += `üí∏ *–ö–æ–º–∏—Å—Å–∏–∏:* ${stats.totalCommission.toFixed(2)} —Ä—É–±.\n\n`;
    
    // –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
    if (stats.sellTrades > 0) {
      report += `üìä *–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:* ${stats.averageProfit.toFixed(2)} —Ä—É–±.\n\n`;
    }
    
    // –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
    if (stats.bestTrade) {
      report += `üèÜ *–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:* ${stats.bestTrade.instrumentName} (+${stats.bestTrade.profit?.toFixed(2)} —Ä—É–±.)\n`;
    }
    if (stats.worstTrade) {
      const worstProfit = stats.worstTrade.profit?.toFixed(2);
      report += `üí• *–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:* ${stats.worstTrade.instrumentName} (${worstProfit} —Ä—É–±.)\n\n`;
    }
    
    // –¢–æ—Ä–≥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if (stats.instruments.length > 0) {
      report += `üìã *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:* ${stats.instruments.join(', ')}\n\n`;
    }
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if (Object.keys(stats.signalsUsed).length > 0) {
      report += `üéØ *–°–∏–≥–Ω–∞–ª—ã:*\n`;
      Object.entries(stats.signalsUsed)
        .sort(([,a], [,b]) => b - a)
        .forEach(([signal, count]) => {
          report += `‚Ä¢ ${signal}: ${count}\n`;
        });
    }
    
    return report;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateWeeklyReport(stats: WeeklyStats): string {
    const profitEmoji = stats.totalProfit >= 0 ? 'üìà' : 'üìâ';
    const avgDailyProfit = stats.dailyStats.length > 0 
      ? (stats.totalProfit / stats.dailyStats.length).toFixed(2) 
      : '0.00';
    
    let report = `üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (${stats.weekStart} ‚Äî ${stats.weekEnd})*\n\n`;
    
    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    report += `üí∞ *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${stats.totalProfit.toFixed(2)} —Ä—É–±. ${profitEmoji}\n`;
    report += `üìä *–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å:* ${avgDailyProfit} —Ä—É–±.\n`;
    report += `üîÑ *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* ${stats.totalTrades}\n`;
    report += `üí∏ *–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:* ${stats.totalCommission.toFixed(2)} —Ä—É–±.\n\n`;
    
    // –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
    report += `üèÜ *–õ—É—á—à–∏–π –¥–µ–Ω—å:* ${stats.bestDay}\n`;
    report += `üí• *–•—É–¥—à–∏–π –¥–µ–Ω—å:* ${stats.worstDay}\n\n`;
    
    // –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
    report += `üéØ *–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* ${stats.mostActiveInstrument}\n`;
    report += `üì° *–°–∞–º—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å–∏–≥–Ω–∞–ª:* ${stats.mostUsedSignal}\n\n`;
    
    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –¥–Ω—è–º
    report += `üìà *–î–µ—Ç–∞–ª–∏ –ø–æ –¥–Ω—è–º:*\n`;
    stats.dailyStats.forEach(day => {
      const dayProfit = day.totalProfit.toFixed(2);
      const dayEmoji = day.totalProfit >= 0 ? '‚úÖ' : '‚ùå';
      report += `‚Ä¢ ${day.date}: ${dayProfit} —Ä—É–±. (${day.totalTrades} —Å–¥–µ–ª–æ–∫) ${dayEmoji}\n`;
    });
    
    return report;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
   */
  async generateWeeklyProfitChart(stats: WeeklyStats): Promise<Buffer> {
    const canvas = createCanvas(this.config.chartWidth, this.config.chartHeight);
    const ctx = canvas.getContext('2d');

    const labels = stats.dailyStats.map(day => {
      const date = new Date(day.date);
      return date.toLocaleDateString('ru-RU', { weekday: 'short', month: 'short', day: 'numeric' });
    });

    const profitData = stats.dailyStats.map(day => day.totalProfit);
    const cumulativeData = [];
    let cumulative = 0;
    for (const profit of profitData) {
      cumulative += profit;
      cumulativeData.push(cumulative);
    }

    new Chart(ctx as any, {
      type: 'line',
      data: {
        labels,
        datasets: [
          {
            label: '–î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å',
            data: profitData,
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            tension: 0.1,
            yAxisID: 'y',
          },
          {
            label: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å',
            data: cumulativeData,
            borderColor: 'rgb(255, 99, 132)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            tension: 0.1,
            yAxisID: 'y1',
          },
        ],
      },
      options: {
        responsive: false,
        interaction: {
          mode: 'index',
          intersect: false,
        },
        scales: {
          x: {
            display: true,
            title: {
              display: true,
              text: '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏',
            },
          },
          y: {
            type: 'linear',
            display: true,
            position: 'left',
            title: {
              display: true,
              text: '–î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Ä—É–±.)',
            },
          },
          y1: {
            type: 'linear',
            display: true,
            position: 'right',
            title: {
              display: true,
              text: '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Ä—É–±.)',
            },
            grid: {
              drawOnChartArea: false,
            },
          },
        },
        plugins: {
          title: {
            display: true,
            text: `–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (${stats.weekStart} ‚Äî ${stats.weekEnd})`,
          },
          legend: {
            display: true,
          },
        },
      },
    });

    return canvas.toBuffer('image/png');
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async generateSignalsChart(stats: DailyStats | WeeklyStats): Promise<Buffer> {
    const canvas = createCanvas(this.config.chartWidth, this.config.chartHeight);
    const ctx = canvas.getContext('2d');

    let signalsData: Record<string, number>;
    let title: string;

    if ('dailyStats' in stats) {
      // –≠—Ç–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      signalsData = {};
      stats.dailyStats.forEach(day => {
        Object.entries(day.signalsUsed).forEach(([signal, count]) => {
          signalsData[signal] = (signalsData[signal] || 0) + count;
        });
      });
      title = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (${stats.weekStart} ‚Äî ${stats.weekEnd})`;
    } else {
      // –≠—Ç–æ –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      signalsData = stats.signalsUsed;
      title = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ ${stats.date}`;
    }

    const labels = Object.keys(signalsData);
    const data = Object.values(signalsData);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const colors = labels.map((_, index) => {
      const hue = (index * 137.508) % 360; // –ó–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
      return `hsl(${hue}, 70%, 60%)`;
    });

    new Chart(ctx as any, {
      type: 'doughnut',
      data: {
        labels,
        datasets: [
          {
            data,
            backgroundColor: colors,
            borderWidth: 2,
            borderColor: '#fff',
          },
        ],
      },
      options: {
        responsive: false,
        plugins: {
          title: {
            display: true,
            text: title,
          },
          legend: {
            display: true,
            position: 'bottom',
          },
        },
      },
    });

    return canvas.toBuffer('image/png');
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
   */
  generateTradesReport(trades: TradeRecord[]): string {
    if (trades.length === 0) {
      return 'üìä *–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥*';
    }

    let report = 'üìã *–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º*\n\n';

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    const byInstrument = trades.reduce((acc, trade) => {
      if (!acc[trade.instrumentName]) {
        acc[trade.instrumentName] = [];
      }
      acc[trade.instrumentName].push(trade);
      return acc;
    }, {} as Record<string, TradeRecord[]>);

    Object.entries(byInstrument).forEach(([instrument, instrumentTrades]) => {
      const buys = instrumentTrades.filter(t => t.action === 'buy');
      const sells = instrumentTrades.filter(t => t.action === 'sell');
      const totalProfit = sells.reduce((sum, t) => sum + (t.profit || 0), 0);

      report += `üè∑Ô∏è *${instrument}*\n`;
      report += `‚Ä¢ –ü–æ–∫—É–ø–æ–∫: ${buys.length}\n`;
      report += `‚Ä¢ –ü—Ä–æ–¥–∞–∂: ${sells.length}\n`;
      report += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)} —Ä—É–±.\n\n`;
    });

    return report;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  formatTradeNotification(trade: TradeRecord): string {
    const actionEmoji = trade.action === 'buy' ? 'üü¢' : 'üî¥';
    const actionText = trade.action === 'buy' ? '–ü–û–ö–£–ü–ö–ê' : '–ü–†–û–î–ê–ñ–ê';
    
    let message = `${actionEmoji} *${actionText}*\n\n`;
    message += `üìÑ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* ${trade.instrumentName}\n`;
    message += `üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${trade.quantity}\n`;
    message += `üí∞ *–¶–µ–Ω–∞:* ${trade.price.toFixed(2)} —Ä—É–±.\n`;
    message += `üíµ *–°—É–º–º–∞:* ${trade.totalAmount.toFixed(2)} —Ä—É–±.\n`;
    message += `üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* ${trade.commission.toFixed(2)} —Ä—É–±.\n`;
    
    if (trade.action === 'sell' && trade.profit !== undefined) {
      const profitEmoji = trade.profit >= 0 ? 'üìà' : 'üìâ';
      message += `${profitEmoji} *–ü—Ä–∏–±—ã–ª—å:* ${trade.profit.toFixed(2)} —Ä—É–±. (${trade.profitPercent?.toFixed(2)}%)\n`;
    }
    
    if (trade.signals.length > 0) {
      message += `üéØ *–°–∏–≥–Ω–∞–ª—ã:* ${trade.signals.join(', ')}\n`;
    }
    
    if (trade.triggerExpression) {
      message += `‚ö° *–¢—Ä–∏–≥–≥–µ—Ä:* \`${trade.triggerExpression}\`\n`;
    }
    
    message += `‚è∞ *–í—Ä–µ–º—è:* ${trade.timestamp.toLocaleString('ru-RU')}\n`;
    
    return message;
  }
}
