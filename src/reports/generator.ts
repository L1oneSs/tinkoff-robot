import { DailyStats, WeeklyStats, TradeRecord } from '../trade-tracker';
import { join } from 'path';
import { Logger } from '@vitalets/logger';
import { createCanvas } from 'canvas';

export interface ReportConfig {
  includeCharts: boolean;
  chartWidth: number;
  chartHeight: number;
  outputDir: string;
}

export class ReportGenerator {
  private logger: Logger;
  private config: ReportConfig;

  constructor(config: Partial<ReportConfig> = {}) {
    this.logger = new Logger({ prefix: '[ReportGenerator]:', level: 'info' });
    
    // –í serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º /tmp –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const isServerless = this.isServerlessEnvironment();
    const defaultOutputDir = isServerless 
      ? join('/tmp', 'reports') 
      : join(process.cwd(), 'reports');
    
    this.config = {
      includeCharts: true,
      chartWidth: 800,
      chartHeight: 400,
      outputDir: defaultOutputDir,
      ...config,
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–¥ –≤ serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏
   */
  private isServerlessEnvironment(): boolean {
    return !!(
      process.env.AWS_LAMBDA_FUNCTION_NAME ||
      process.env._HANDLER ||
      process.env.LAMBDA_TASK_ROOT ||
      process.env.YANDEX_CLOUD_FUNCTION_NAME ||
      process.env.YANDEX_CLOUD_FUNCTION_VERSION
    );
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateDailyReport(stats: DailyStats): string {
    const profitEmoji = stats.totalProfit >= 0 ? 'üìà' : 'üìâ';
    const winRate = stats.sellTrades > 0 
      ? (stats.successfulTrades / stats.sellTrades * 100).toFixed(1) 
      : '0.0';
    
    let report = `ü§ñ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ ${stats.date}*\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    report += `üí∞ *–ü—Ä–∏–±—ã–ª—å:* ${stats.totalProfit.toFixed(2)} —Ä—É–±. ${profitEmoji}\n`;
    report += `üìä *–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:* ${stats.totalProfitPercent.toFixed(2)}%\n`;
    report += `üîÑ *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* ${stats.totalTrades}\n`;
    report += `üì• *–ü–æ–∫—É–ø–æ–∫:* ${stats.buyTrades}\n`;
    report += `üì§ *–ü—Ä–æ–¥–∞–∂:* ${stats.sellTrades}\n`;
    report += `‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö:* ${stats.successfulTrades} (${winRate}%)\n`;
    report += `‚ùå *–£–±—ã—Ç–æ—á–Ω—ã—Ö:* ${stats.losingTrades}\n`;
    report += `üí∏ *–ö–æ–º–∏—Å—Å–∏–∏:* ${stats.totalCommission.toFixed(2)} —Ä—É–±.\n\n`;
    
    // –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
    if (stats.sellTrades > 0) {
      report += `üìä *–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:* ${stats.averageProfit.toFixed(2)} —Ä—É–±.\n\n`;
    }
    
    // –õ—É—á—à–∞—è –∏ —Ö—É–¥—à–∞—è —Å–¥–µ–ª–∫–∏
    if (stats.bestTrade) {
      report += `üèÜ *–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:* ${stats.bestTrade.instrumentName} (+${stats.bestTrade.profit?.toFixed(2)} —Ä—É–±.)\n`;
    }
    if (stats.worstTrade) {
      const worstProfit = stats.worstTrade.profit?.toFixed(2);
      report += `üí• *–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:* ${stats.worstTrade.instrumentName} (${worstProfit} —Ä—É–±.)\n\n`;
    }
    
    // –¢–æ—Ä–≥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if (stats.instruments.length > 0) {
      report += `üìã *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:* ${stats.instruments.join(', ')}\n\n`;
    }
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if (Object.keys(stats.signalsUsed).length > 0) {
      report += `üéØ *–°–∏–≥–Ω–∞–ª—ã:*\n`;
      Object.entries(stats.signalsUsed)
        .sort(([,a], [,b]) => b - a)
        .forEach(([signal, count]) => {
          report += `‚Ä¢ ${signal}: ${count}\n`;
        });
    }
    
    return report;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  generateWeeklyReport(stats: WeeklyStats): string {
    const profitEmoji = stats.totalProfit >= 0 ? 'üìà' : 'üìâ';
    const avgDailyProfit = stats.dailyStats.length > 0 
      ? (stats.totalProfit / stats.dailyStats.length).toFixed(2) 
      : '0.00';
    
    let report = `üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç (${stats.weekStart} ‚Äî ${stats.weekEnd})*\n\n`;
    
    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    report += `üí∞ *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:* ${stats.totalProfit.toFixed(2)} —Ä—É–±. ${profitEmoji}\n`;
    report += `üìä *–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –≤ –¥–µ–Ω—å:* ${avgDailyProfit} —Ä—É–±.\n`;
    report += `üîÑ *–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:* ${stats.totalTrades}\n`;
    report += `üí∏ *–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏:* ${stats.totalCommission.toFixed(2)} —Ä—É–±.\n\n`;
    
    // –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –¥–µ–Ω—å
    report += `üèÜ *–õ—É—á—à–∏–π –¥–µ–Ω—å:* ${stats.bestDay}\n`;
    report += `üí• *–•—É–¥—à–∏–π –¥–µ–Ω—å:* ${stats.worstDay}\n\n`;
    
    // –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
    report += `üéØ *–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* ${stats.mostActiveInstrument}\n`;
    report += `üì° *–°–∞–º—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Å–∏–≥–Ω–∞–ª:* ${stats.mostUsedSignal}\n\n`;
    
    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –¥–Ω—è–º
    report += `üìà *–î–µ—Ç–∞–ª–∏ –ø–æ –¥–Ω—è–º:*\n`;
    stats.dailyStats.forEach(day => {
      const dayProfit = day.totalProfit.toFixed(2);
      const dayEmoji = day.totalProfit >= 0 ? '‚úÖ' : '‚ùå';
      report += `‚Ä¢ ${day.date}: ${dayProfit} —Ä—É–±. (${day.totalTrades} —Å–¥–µ–ª–æ–∫) ${dayEmoji}\n`;
    });
    
    return report;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
   */
  async generateWeeklyProfitChart(stats: WeeklyStats): Promise<Buffer> {
    if (!this.config.includeCharts) {
      throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }

    try {
      const canvas = createCanvas(this.config.chartWidth, this.config.chartHeight);
      const context = canvas.getContext('2d');
      
      this.drawProfitChart(context, stats);
      
      this.logger.info('–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return canvas.toBuffer('image/png');
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
   */
  private drawProfitChart(context: any, stats: WeeklyStats) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ–ª—Å—Ç–∞
    context.fillStyle = 'white';
    context.fillRect(0, 0, this.config.chartWidth, this.config.chartHeight);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const profitData = stats.dailyStats.map(day => day.totalProfit);
    
    // –†–∞–∑–º–µ—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞
    const margin = { top: 50, right: 80, bottom: 60, left: 80 };
    const width = this.config.chartWidth - margin.left - margin.right;
    const height = this.config.chartHeight - margin.top - margin.bottom;
    
    // –ü—Ä–æ—Å—Ç—ã–µ —à–∫–∞–ª—ã
    const minProfit = Math.min(...profitData);
    const maxProfit = Math.max(...profitData);
    
    // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    context.save();
    context.translate(margin.left, margin.top);
    
    this.drawProfitTitle(context, width, stats);
    this.drawProfitLine(context, profitData, width, height, minProfit, maxProfit);
    this.drawProfitLegend(context, width);
    
    context.restore();
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
   */
  private drawProfitTitle(context: any, width: number, stats: WeeklyStats) {
    context.fillStyle = '#333';
    context.font = 'bold 16px Arial';
    context.textAlign = 'center';
    context.fillText(`–ü—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é (${stats.weekStart} ‚Äî ${stats.weekEnd})`, width / 2, -20);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∏–Ω–∏–∏ –ø—Ä–∏–±—ã–ª–∏
   */
  private drawProfitLine(
    context: any, 
    profitData: number[], 
    width: number, 
    height: number, 
    minProfit: number, 
    maxProfit: number
  ) {
    // –î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (—Å–∏–Ω—è—è –ª–∏–Ω–∏—è)
    context.strokeStyle = '#2196F3';
    context.lineWidth = 3;
    context.beginPath();
    profitData.forEach((profit, index) => {
      const x = (index / (profitData.length - 1)) * width;
      const y = height - ((profit - minProfit) / (maxProfit - minProfit)) * height;
      if (index === 0) {
        context.moveTo(x, y);
      } else {
        context.lineTo(x, y);
      }
    });
    context.stroke();
    
    // –¢–æ—á–∫–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    context.fillStyle = '#2196F3';
    profitData.forEach((profit, index) => {
      const x = (index / (profitData.length - 1)) * width;
      const y = height - ((profit - minProfit) / (maxProfit - minProfit)) * height;
      context.beginPath();
      context.arc(x, y, 4, 0, 2 * Math.PI);
      context.fill();
    });
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–µ–≥–µ–Ω–¥—ã –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª–∏
   */
  private drawProfitLegend(context: any, width: number) {
    context.fillStyle = '#2196F3';
    context.fillRect(width - 150, -10, 15, 3);
    context.fillStyle = '#333';
    context.font = '12px Arial';
    context.textAlign = 'left';
    context.fillText('–î–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å', width - 130, -5);
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  async generateSignalsChart(stats: DailyStats | WeeklyStats): Promise<Buffer> {
    if (!this.config.includeCharts) {
      throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    }

    try {
      const canvas = createCanvas(this.config.chartWidth, this.config.chartHeight);
      const context = canvas.getContext('2d');
      
      this.drawSignalsChart(context, stats);
      
      this.logger.info('–ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      return canvas.toBuffer('image/png');
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  private drawSignalsChart(context: any, stats: DailyStats | WeeklyStats) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ–ª—Å—Ç–∞
    context.fillStyle = 'white';
    context.fillRect(0, 0, this.config.chartWidth, this.config.chartHeight);

    const { signalsData, title } = this.prepareSignalsData(stats);
    const entries = Object.entries(signalsData);
    
    if (entries.length === 0) {
      this.drawEmptySignalsChart(context);
      return;
    }

    this.drawSignalsPieChart(context, entries, title);
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  private prepareSignalsData(stats: DailyStats | WeeklyStats) {
    let signalsData: Record<string, number>;
    let title: string;

    if ('dailyStats' in stats) {
      // –≠—Ç–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      signalsData = {};
      stats.dailyStats.forEach(day => {
        Object.entries(day.signalsUsed).forEach(([signal, count]) => {
          signalsData[signal] = (signalsData[signal] || 0) + count;
        });
      });
      title = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é (${stats.weekStart} ‚Äî ${stats.weekEnd})`;
    } else {
      // –≠—Ç–æ –¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      signalsData = stats.signalsUsed;
      title = `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ ${stats.date}`;
    }

    return { signalsData, title };
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  private drawEmptySignalsChart(context: any) {
    context.fillStyle = '#333';
    context.font = 'bold 16px Arial';
    context.textAlign = 'center';
    context.fillText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–≥–Ω–∞–ª–∞—Ö', this.config.chartWidth / 2, this.config.chartHeight / 2);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  private drawSignalsPieChart(context: any, entries: [string, number][], title: string) {
    const total = entries.reduce((sum, [, count]) => sum + count, 0);
    
    // –¶–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞
    const centerX = this.config.chartWidth / 2;
    const centerY = (this.config.chartHeight - 60) / 2 + 30;
    const radius = Math.min(this.config.chartWidth, this.config.chartHeight - 120) / 3;
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    context.fillStyle = '#333';
    context.font = 'bold 16px Arial';
    context.textAlign = 'center';
    context.fillText(title, centerX, 30);
    
    this.drawPieSlices(context, entries, total, centerX, centerY, radius);
    this.drawSignalsLegend(context, entries, total, centerX, centerY, radius);
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–∫—Ç–æ—Ä–æ–≤ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
   */
  private drawPieSlices(
    context: any, 
    entries: [string, number][], 
    total: number, 
    centerX: number, 
    centerY: number, 
    radius: number
  ) {
    const colors = entries.map((_, index) => {
      const hue = (index * 137.508) % 360;
      return `hsl(${hue}, 70%, 60%)`;
    });
    
    let currentAngle = -Math.PI / 2;
    
    entries.forEach(([, count], index) => {
      const sliceAngle = (count / total) * 2 * Math.PI;
      const endAngle = currentAngle + sliceAngle;
      
      context.fillStyle = colors[index];
      context.beginPath();
      context.moveTo(centerX, centerY);
      context.arc(centerX, centerY, radius, currentAngle, endAngle);
      context.closePath();
      context.fill();
      
      context.strokeStyle = '#fff';
      context.lineWidth = 2;
      context.stroke();
      
      currentAngle = endAngle;
    });
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–µ–≥–µ–Ω–¥—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
   */
  private drawSignalsLegend(
    context: any, 
    entries: [string, number][], 
    total: number, 
    centerX: number, 
    centerY: number, 
    radius: number
  ) {
    const colors = entries.map((_, index) => {
      const hue = (index * 137.508) % 360;
      return `hsl(${hue}, 70%, 60%)`;
    });
    
    const legendStartY = centerY + radius + 30;
    const legendItemHeight = 20;
    
    context.font = '12px Arial';
    context.textAlign = 'left';
    
    entries.forEach(([signalName, count], index) => {
      const y = legendStartY + index * legendItemHeight;
      
      context.fillStyle = colors[index];
      context.fillRect(centerX - 150, y - 10, 12, 12);
      
      context.fillStyle = '#333';
      const percentage = ((count / total) * 100).toFixed(1);
      context.fillText(`${signalName}: ${count} (${percentage}%)`, centerX - 130, y);
    });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö
   */
  generateTradesReport(trades: TradeRecord[]): string {
    if (trades.length === 0) {
      return 'üìä *–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥*';
    }

    let report = 'üìã *–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º*\n\n';

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
    const byInstrument = trades.reduce((acc, trade) => {
      if (!acc[trade.instrumentName]) {
        acc[trade.instrumentName] = [];
      }
      acc[trade.instrumentName].push(trade);
      return acc;
    }, {} as Record<string, TradeRecord[]>);

    Object.entries(byInstrument).forEach(([instrument, instrumentTrades]) => {
      const buys = instrumentTrades.filter(t => t.action === 'buy');
      const sells = instrumentTrades.filter(t => t.action === 'sell');
      const totalProfit = sells.reduce((sum, t) => sum + (t.profit || 0), 0);

      report += `üè∑Ô∏è *${instrument}*\n`;
      report += `‚Ä¢ –ü–æ–∫—É–ø–æ–∫: ${buys.length}\n`;
      report += `‚Ä¢ –ü—Ä–æ–¥–∞–∂: ${sells.length}\n`;
      report += `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(2)} —Ä—É–±.\n\n`;
    });

    return report;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
   */
  formatTradeNotification(trade: TradeRecord): string {
    const actionEmoji = trade.action === 'buy' ? 'üü¢' : 'üî¥';
    const actionText = trade.action === 'buy' ? '–ü–û–ö–£–ü–ö–ê' : '–ü–†–û–î–ê–ñ–ê';
    
    let message = `${actionEmoji} *${actionText}*\n\n`;
    message += `üìÑ *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:* ${trade.instrumentName}\n`;
    message += `üìä *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${trade.quantity}\n`;
    message += `üí∞ *–¶–µ–Ω–∞:* ${trade.price.toFixed(2)} —Ä—É–±.\n`;
    message += `üíµ *–°—É–º–º–∞:* ${trade.totalAmount.toFixed(2)} —Ä—É–±.\n`;
    message += `üí∏ *–ö–æ–º–∏—Å—Å–∏—è:* ${trade.commission.toFixed(2)} —Ä—É–±.\n`;
    
    if (trade.action === 'sell' && trade.profit !== undefined) {
      const profitEmoji = trade.profit >= 0 ? 'üìà' : 'üìâ';
      message += `${profitEmoji} *–ü—Ä–∏–±—ã–ª—å:* ${trade.profit.toFixed(2)} —Ä—É–±. (${trade.profitPercent?.toFixed(2)}%)\n`;
    }
    
    if (trade.signals.length > 0) {
      message += `üéØ *–°–∏–≥–Ω–∞–ª—ã:* ${trade.signals.join(', ')}\n`;
    }
    
    if (trade.triggerExpression) {
      message += `‚ö° *–¢—Ä–∏–≥–≥–µ—Ä:* \`${trade.triggerExpression}\`\n`;
    }
    
    message += `‚è∞ *–í—Ä–µ–º—è:* ${trade.timestamp.toLocaleString('ru-RU')}\n`;
    
    return message;
  }
}
