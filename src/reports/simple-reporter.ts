/**
 * –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ —á–µ—Ä–µ–∑ Google Sheets –∏ Telegram
 */

import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { Logger } from '@vitalets/logger';
import { TelegramNotifier } from '../notifications/telegram.js';

interface ReportConfig {
  googleServiceAccountEmail: string;
  googleServiceAccountPrivateKey: string;
  googleServiceAccountPrivateKeyBase64?: string;
  googleSpreadsheetId: string;
  googleWorksheetTitle?: string;
  telegramBotToken: string;
  telegramChatId: string;
}

export class SimpleReportSender {
  private logger: Logger;
  private config: ReportConfig;
  private telegramNotifier: TelegramNotifier;

  constructor() {
    this.logger = new Logger({ prefix: '[Reports]:', level: 'info' });
    
    this.config = {
      googleServiceAccountEmail: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL!,
      googleServiceAccountPrivateKey: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY || '',
      googleServiceAccountPrivateKeyBase64: process.env.GOOGLE_SERVICE_ACCOUNT_PRIVATE_KEY_BASE64,
      googleSpreadsheetId: process.env.GOOGLE_SPREADSHEET_ID!,
      googleWorksheetTitle: process.env.GOOGLE_WORKSHEET_TITLE || 'Trades',
      telegramBotToken: process.env.TELEGRAM_BOT_TOKEN!,
      telegramChatId: process.env.TELEGRAM_CHAT_ID!
    };

    this.telegramNotifier = new TelegramNotifier();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
   */
  async checkAndSendReports(): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö
      const moscowTime = new Date(new Date().toLocaleString("en-US", {timeZone: "Europe/Moscow"}));
      const currentHour = moscowTime.getHours();
      const currentMinute = moscowTime.getMinutes();
      const currentDay = moscowTime.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1-5 = —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
      
      this.logger.info(`–í—Ä–µ–º—è –ú–°–ö: ${moscowTime.toLocaleString('ru-RU')}, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ${currentDay}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
      if (currentDay === 0 || currentDay === 6) {
        this.logger.info('–í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å - –æ—Ç—á—ë—Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤ (19:00 –ú–°–ö ¬± 5 –º–∏–Ω—É—Ç)
      const isReportTime = (currentHour === 19 && currentMinute >= 0 && currentMinute <= 10);
      
      if (!isReportTime) {
        this.logger.info(`–ù–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ (${currentHour}:${currentMinute}). –û—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ 19:00-19:10 –ú–°–ö`);
        return;
      }

      this.logger.info('–í—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–æ–≤! –ù–∞—á–∏–Ω–∞–µ–º...');

      const dateStr = moscowTime.toISOString().split('T')[0];
      
      // –í –ø—è—Ç–Ω–∏—Ü—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π + –Ω–µ–¥–µ–ª—å–Ω—ã–π
      if (currentDay === 5) {
        this.logger.info('–ü—è—Ç–Ω–∏—Ü–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –∏ –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç—ã');
        await this.sendDailyReport(dateStr);
        await this.sendWeeklyReport(dateStr);
      } else {
        // –í –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω–æ–π
        this.logger.info('–ë—É–¥–Ω–∏–π –¥–µ–Ω—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç');
        await this.sendDailyReport(dateStr);
      }

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–æ–≤:', error);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç
   */
  private async sendDailyReport(date: string): Promise<void> {
    try {
      const stats = await this.getDayStats(date);
      
      const report = `üìä <b>–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –∑–∞ ${date}</b>

üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${stats.totalProfit.toFixed(2)} ‚ÇΩ
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: ${stats.totalCommission.toFixed(2)} ‚ÇΩ

üìà <b>–î–µ—Ç–∞–ª–∏:</b>
‚Ä¢ –ü–æ–∫—É–ø–∫–∏: ${stats.buyTrades}
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: ${stats.sellTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.profitableTrades}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades}
‚Ä¢ Win Rate: ${stats.winRate.toFixed(1)}%

üèÜ <b>–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:</b> +${stats.biggestWin.toFixed(2)} ‚ÇΩ
üìâ <b>–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:</b> ${stats.biggestLoss.toFixed(2)} ‚ÇΩ`;

      await this.telegramNotifier.sendMessage(report, 'HTML');
      this.logger.info('–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
   */
  private async sendWeeklyReport(endDate: string): Promise<void> {
    try {
      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
      const end = new Date(endDate);
      const start = new Date(end);
      start.setDate(end.getDate() - 4); // –ü—è—Ç–Ω–∏—Ü–∞ –º–∏–Ω—É—Å 4 –¥–Ω—è = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
      const startDate = start.toISOString().split('T')[0];

      const stats = await this.getWeekStats(startDate, endDate);
      
      const report = `üìÖ <b>–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç ${startDate} ‚Äî ${endDate}</b>

üí∞ <b>–ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: ${stats.totalTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${stats.totalProfit.toFixed(2)} ‚ÇΩ
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏: ${stats.totalCommission.toFixed(2)} ‚ÇΩ

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–∫—É–ø–∫–∏: ${stats.buyTrades}
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: ${stats.sellTrades}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: ${stats.profitableTrades}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: ${stats.losingTrades}
‚Ä¢ Win Rate: ${stats.winRate.toFixed(1)}%

üèÜ <b>–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞:</b> +${stats.biggestWin.toFixed(2)} ‚ÇΩ
üìâ <b>–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞:</b> ${stats.biggestLoss.toFixed(2)} ‚ÇΩ

–•–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö! üéâ`;

      await this.telegramNotifier.sendMessage(report, 'HTML');
      this.logger.info('–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
   */
  private async getDayStats(date: string) {
    const trades = await this.getTradesFromSheets(date, date);
    return this.calculateStats(trades);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
   */
  private async getWeekStats(startDate: string, endDate: string) {
    const trades = await this.getTradesFromSheets(startDate, endDate);
    return this.calculateStats(trades);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫–∏ –∏–∑ Google Sheets
   */
  private async getTradesFromSheets(fromDate: string, toDate: string): Promise<any[]> {
    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
      let privateKey: string;
      if (this.config.googleServiceAccountPrivateKeyBase64) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º base64 –∫–ª—é—á (–¥–ª—è serverless)
        privateKey = Buffer.from(this.config.googleServiceAccountPrivateKeyBase64, 'base64').toString('utf-8');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –∫–ª—é—á
        privateKey = this.config.googleServiceAccountPrivateKey.replace(/\\n/g, '\n');
      }
      
      // –°–æ–∑–¥–∞–µ–º JWT –∫–ª–∏–µ–Ω—Ç –¥–ª—è Google Sheets
      const serviceAccountAuth = new JWT({
        email: this.config.googleServiceAccountEmail,
        key: privateKey,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });

      const doc = new GoogleSpreadsheet(this.config.googleSpreadsheetId, serviceAccountAuth);
      await doc.loadInfo();

      const worksheet = doc.sheetsByTitle[this.config.googleWorksheetTitle!];
      if (!worksheet) {
        this.logger.warn(`–õ–∏—Å—Ç "${this.config.googleWorksheetTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }

      const rows = await worksheet.getRows();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
      const trades = rows.filter(row => {
        const tradeDate = row.get('–î–∞—Ç–∞');
        if (!tradeDate) return false;
        return tradeDate >= fromDate && tradeDate <= toDate;
      });

      this.logger.info(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥ ${fromDate} - ${toDate}`);
      return trades;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error);
      return [];
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–¥–µ–ª–∫–∞–º
   */
  private calculateStats(trades: any[]) {
    const stats = {
      totalTrades: trades.length,
      totalProfit: 0,
      totalCommission: 0,
      buyTrades: 0,
      sellTrades: 0,
      profitableTrades: 0,
      losingTrades: 0,
      winRate: 0,
      biggestWin: 0,
      biggestLoss: 0
    };

    trades.forEach(trade => {
      // –ü–æ–¥—Å—á—ë—Ç —Ç–∏–ø–æ–≤ —Å–¥–µ–ª–æ–∫
      const action = trade.get('–î–µ–π—Å—Ç–≤–∏–µ');
      if (action === '–ü–æ–∫—É–ø–∫–∞') {
        stats.buyTrades++;
      } else if (action === '–ü—Ä–æ–¥–∞–∂–∞') {
        stats.sellTrades++;
      }

      // –ö–æ–º–∏—Å—Å–∏–∏
      const commission = parseFloat(trade.get('–ö–æ–º–∏—Å—Å–∏—è')) || 0;
      stats.totalCommission += commission;

      // –ü—Ä–∏–±—ã–ª—å
      const profit = parseFloat(trade.get('–ü—Ä–∏–±—ã–ª—å')) || 0;
      if (profit !== 0) {
        stats.totalProfit += profit;
        
        if (profit > 0) {
          stats.profitableTrades++;
          if (profit > stats.biggestWin) {
            stats.biggestWin = profit;
          }
        } else {
          stats.losingTrades++;
          if (profit < stats.biggestLoss) {
            stats.biggestLoss = profit;
          }
        }
      }
    });

    // Win Rate
    const tradesWithResult = stats.profitableTrades + stats.losingTrades;
    stats.winRate = tradesWithResult > 0 ? (stats.profitableTrades / tradesWithResult) * 100 : 0;

    return stats;
  }
}
