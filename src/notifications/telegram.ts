/**
 * Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
 */
import TelegramBot from 'node-telegram-bot-api';
import { Logger } from '@vitalets/logger';

export interface TradeNotification {
  type: 'buy' | 'sell';
  instrument: string;
  ticker: string;
  price: number;
  quantity: number;
  amount: number;
  signals: string[];
  timestamp: Date;
  profit?: number; // –¥–ª—è –ø—Ä–æ–¥–∞–∂
}

export class TelegramNotifier {
  private bot?: TelegramBot;
  private chatId: string;
  private logger: Logger;

  constructor() {
    this.logger = new Logger({ prefix: '[telegram]:', level: 'info' });
    
    const botToken = process.env.TELEGRAM_BOT_TOKEN?.trim();
    this.chatId = process.env.TELEGRAM_CHAT_ID?.trim() || '';

    if (!botToken || botToken === 'YOUR_BOT_TOKEN_HERE') {
      this.logger.warn('Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
      return;
    }

    if (!this.chatId || this.chatId === 'YOUR_CHAT_ID_HERE') {
      this.logger.warn('Telegram chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
      return;
    }

    try {
      this.bot = new TelegramBot(botToken);
      this.logger.info('Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ
   */
  async sendTradeNotification(trade: TradeNotification): Promise<void> {
    if (!this.bot) return;

    try {
      const message = this.formatTradeMessage(trade);
      await this.bot.sendMessage(this.chatId, message, { parse_mode: 'HTML' });
      this.logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ ${trade.type === 'buy' ? '–ø–æ–∫—É–ø–∫–µ' : '–ø—Ä–æ–¥–∞–∂–µ'} ${trade.ticker}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendMessage(message: string, parseMode: 'HTML' | 'Markdown' = 'Markdown'): Promise<void> {
    if (!this.bot) return;

    try {
      await this.bot.sendMessage(this.chatId, message, { parse_mode: parseMode });
      this.logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (–≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
   */
  async sendDocument(fileData: string | Buffer, filename?: string, caption?: string): Promise<void> {
    if (!this.bot) return;

    try {
      if (typeof fileData === 'string') {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏
        await this.bot.sendDocument(this.chatId, fileData, {
          caption,
          parse_mode: 'HTML'
        });
      } else {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ Buffer –∫–∞–∫ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç
        await this.bot.sendPhoto(this.chatId, fileData, {
          caption,
          parse_mode: 'HTML'
        });
      }
      this.logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram:', error);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–µ
   */
  private formatTradeMessage(trade: TradeNotification): string {
    const action = trade.type === 'buy' ? 'üìà –ü–û–ö–£–ü–ö–ê' : 'üìâ –ü–†–û–î–ê–ñ–ê';
    const emoji = trade.type === 'buy' ? 'üü¢' : 'üî¥';
    
    let message = `${emoji} <b>${action}</b>\n\n`;
    message += `üìä <b>${trade.ticker}</b>\n`;
    message += `üí∞ –¶–µ–Ω–∞: <code>${trade.price.toFixed(2)} ‚ÇΩ</code>\n`;
    message += `üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>${trade.quantity} –ª–æ—Ç.</code>\n`;
    message += `üíµ –°—É–º–º–∞: <code>${trade.amount.toFixed(2)} ‚ÇΩ</code>\n`;
    
    if (trade.type === 'sell' && trade.profit !== undefined) {
      const profitEmoji = trade.profit > 0 ? 'üíö' : '‚ù§Ô∏è';
      message += `${profitEmoji} –ü—Ä–∏–±—ã–ª—å: <code>${trade.profit > 0 ? '+' : ''}${trade.profit.toFixed(2)}%</code>\n`;
    }
    
    if (trade.signals.length > 0) {
      message += `üîî –°–∏–≥–Ω–∞–ª—ã: <code>${trade.signals.join(', ')}</code>\n`;
    }
    
    message += `‚è∞ ${trade.timestamp.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })} –ú–°–ö`;
    
    return message;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
   */
  isEnabled(): boolean {
    return !!this.bot;
  }
}
