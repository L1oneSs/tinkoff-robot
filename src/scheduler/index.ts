/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 */

import { Logger } from '@vitalets/logger';

export class ReportScheduler {
  private logger: Logger;

  constructor() {
    this.logger = new Logger({ prefix: '[ReportScheduler]:', level: 'info' });
  }

  /**
   * –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –æ—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
   */
  async checkAndSendReports(): Promise<void> {
    // –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    this.logger.debug('–û—Ç—á–µ—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç–æ—Ä–≥–æ–≤–æ–µ –ª–∏ –≤—Ä–µ–º—è (10:00-19:00 –ú–°–ö –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏)
   */
  isTradingTime(): boolean {
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å
    if (this.isWeekend(moscowTime)) {
      return false;
    }
    
    const currentHour = moscowTime.getHours();
    return currentHour >= 10 && currentHour < 19;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): string {
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    const currentTime = this.formatTime(moscowTime);
    const isTrading = this.isTradingTime();
    
    return `üìÖ *–°—Ç–∞—Ç—É—Å —Ä–æ–±–æ—Ç–∞*\n\n` +
           `üïê *–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:* ${currentTime}\n` +
           `üìà *–¢–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è:* ${isTrading ? '–î–∞' : '–ù–µ—Ç'}\n` +
           `üìä *–û—Ç—á–µ—Ç—ã:* –û—Ç–∫–ª—é—á–µ–Ω—ã (—Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö)`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
   */
  private getMoscowTime(date: Date): Date {
    return new Date(date.toLocaleString("en-US", { timeZone: "Europe/Moscow" }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ –¥–µ–Ω—å
   */
  private isWeekend(date: Date): boolean {
    const day = date.getDay();
    return day === 0 || day === 6; // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ HH:MM
   */
  private formatTime(date: Date): string {
    return date.toTimeString().slice(0, 5);
  }
}
