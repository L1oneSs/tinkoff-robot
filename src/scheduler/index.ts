/**
 * –ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
 */

import { Logger } from '@vitalets/logger';
import { TradeTracker } from '../trade-tracker';
import { ReportGenerator } from '../reports/generator';
import { TelegramNotifier } from '../notifications/telegram';

export interface SchedulerConfig {
  timezone: string;
  dailyReportTime: string; // HH:MM —Ñ–æ—Ä–º–∞—Ç
  enableWeeklyReports: boolean;
  enableFileCleanup: boolean;
  enableWeekendMode: boolean; // –æ—Ç–∫–ª—é—á–∞—Ç—å –ª–∏ –æ—Ç—á–µ—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
}

export class ReportScheduler {
  private logger: Logger;
  private config: SchedulerConfig;
  private tradeTracker: TradeTracker;
  private reportGenerator: ReportGenerator;
  private telegramNotifier: TelegramNotifier;

  constructor(
    tradeTracker: TradeTracker,
    reportGenerator: ReportGenerator,
    telegramNotifier: TelegramNotifier,
    config: Partial<SchedulerConfig> = {}
  ) {
    this.logger = new Logger({ prefix: '[ReportScheduler]:', level: 'info' });
    this.config = {
      timezone: 'Europe/Moscow',
      dailyReportTime: '18:50',
      enableWeeklyReports: true,
      enableFileCleanup: true,
      enableWeekendMode: true,
      ...config,
    };
    
    this.tradeTracker = tradeTracker;
    this.reportGenerator = reportGenerator;
    this.telegramNotifier = telegramNotifier;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  shouldSendDailyReport(): boolean {
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å
    if (this.config.enableWeekendMode && this.isWeekend(moscowTime)) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    const currentTime = this.formatTime(moscowTime);
    const [targetHour, targetMinute] = this.config.dailyReportTime.split(':').map(Number);
    const [currentHour, currentMinute] = currentTime.split(':').map(Number);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–∂–¥—É 18:50 –∏ 19:00
    if (targetHour === 18 && targetMinute === 50) {
      return currentHour === 18 && currentMinute >= 50 && currentMinute < 60;
    }
    
    return currentHour === targetHour && currentMinute === targetMinute;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  shouldSendWeeklyReport(): boolean {
    if (!this.config.enableWeeklyReports) {
      return false;
    }
    
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º
    const isFriday = moscowTime.getDay() === 5;
    
    // –í —Ç–æ –∂–µ –≤—Ä–µ–º—è, —á—Ç–æ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    const currentTime = this.formatTime(moscowTime);
    const [targetHour, targetMinute] = this.config.dailyReportTime.split(':').map(Number);
    const [currentHour, currentMinute] = currentTime.split(':').map(Number);
    
    if (targetHour === 18 && targetMinute === 50) {
      return isFriday && currentHour === 18 && currentMinute >= 50 && currentMinute < 60;
    }
    
    return isFriday && currentHour === targetHour && currentMinute === targetMinute;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å–¥–µ–ª–æ–∫
   */
  shouldCleanupTrades(): boolean {
    if (!this.config.enableFileCleanup) {
      return false;
    }
    
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    
    // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    const isFriday = moscowTime.getDay() === 5;
    const currentTime = this.formatTime(moscowTime);
    
    // –û—á–∏—â–∞–µ–º –≤ 19:00 –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º
    return isFriday && currentTime === '19:00';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async sendDailyReport(): Promise<void> {
    try {
      const today = this.formatDate(this.getMoscowTime(new Date()));
      const dailyStats = this.tradeTracker.getDailyStats(today);
      
      this.logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ ${today}`);
      
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
      const reportText = this.reportGenerator.generateDailyReport(dailyStats);
      await this.telegramNotifier.sendMessage(reportText);
      
      // –ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–¥–µ–ª–∫–∏)
      if (Object.keys(dailyStats.signalsUsed).length > 0) {
        const signalsChart = await this.reportGenerator.generateSignalsChart(dailyStats);
        await this.telegramNotifier.sendDocument(signalsChart, `signals_${today}.png`);
      }
      
      this.logger.info('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async sendWeeklyReport(): Promise<void> {
    try {
      const now = this.getMoscowTime(new Date());
      const { weekStart, weekEnd } = this.getCurrentWeek(now);
      
      const weeklyStats = this.tradeTracker.getWeeklyStats(weekStart, weekEnd);
      
      this.logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ ${weekStart} - ${weekEnd}`);
      
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
      const reportText = this.reportGenerator.generateWeeklyReport(weeklyStats);
      await this.telegramNotifier.sendMessage(reportText);
      
      // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
      const profitChart = await this.reportGenerator.generateWeeklyProfitChart(weeklyStats);
      await this.telegramNotifier.sendDocument(profitChart, `weekly_profit_${weekStart}_${weekEnd}.png`);
      
      // –ì—Ä–∞—Ñ–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
      const signalsChart = await this.reportGenerator.generateSignalsChart(weeklyStats);
      await this.telegramNotifier.sendDocument(signalsChart, `weekly_signals_${weekStart}_${weekEnd}.png`);
      
      // –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–¥–µ–ª–∫–∞–º
      const weekTrades = this.tradeTracker.getCurrentWeekTrades();
      if (weekTrades.length > 0) {
        const tradesReport = this.reportGenerator.generateTradesReport(weekTrades);
        await this.telegramNotifier.sendMessage(tradesReport);
      }
      
      this.logger.info('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å–¥–µ–ª–æ–∫
   */
  async cleanupTrades(): Promise<void> {
    try {
      this.logger.info('–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å–¥–µ–ª–æ–∫');
      this.tradeTracker.clearTrades();
      
      await this.telegramNotifier.sendMessage(
        'üßπ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞*\n\n–§–∞–π–ª —Å–¥–µ–ª–æ–∫ –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é –Ω–µ–¥–µ–ª—é!'
      );
      
      this.logger.info('–§–∞–π–ª —Å–¥–µ–ª–æ–∫ –æ—á–∏—â–µ–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ —Å–¥–µ–ª–æ–∫:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–æ–≤
   */
  async checkAndSendReports(): Promise<void> {
    this.logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–µ—Ä–≤—ã–º (—Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º)
    if (this.shouldSendWeeklyReport()) {
      await this.sendWeeklyReport();
    }
    // –ó–∞—Ç–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    else if (this.shouldSendDailyReport()) {
      await this.sendDailyReport();
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –æ—Ç—á–µ—Ç–æ–≤)
    if (this.shouldCleanupTrades()) {
      await this.cleanupTrades();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É
   */
  private getMoscowTime(date: Date): Date {
    return new Date(date.toLocaleString("en-US", { timeZone: "Europe/Moscow" }));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ –¥–µ–Ω—å
   */
  private isWeekend(date: Date): boolean {
    const day = date.getDay();
    return day === 0 || day === 6; // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ HH:MM
   */
  private formatTime(date: Date): string {
    return date.toTimeString().slice(0, 5);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ YYYY-MM-DD
   */
  private formatDate(date: Date): string {
    return date.toISOString().split('T')[0];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
   */
  private getCurrentWeek(date: Date): { weekStart: string; weekEnd: string } {
    const monday = new Date(date);
    const day = monday.getDay();
    const diff = monday.getDate() - day + (day === 0 ? -6 : 1);
    monday.setDate(diff);
    
    const sunday = new Date(monday);
    sunday.setDate(sunday.getDate() + 6);
    
    return {
      weekStart: this.formatDate(monday),
      weekEnd: this.formatDate(sunday),
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç–æ—Ä–≥–æ–≤–æ–µ –ª–∏ –≤—Ä–µ–º—è (10:00-19:00 –ú–°–ö –≤ –±—É–¥–Ω–∏–µ –¥–Ω–∏)
   */
  isTradingTime(): boolean {
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–∏–π –ª–∏ –¥–µ–Ω—å
    if (this.isWeekend(moscowTime)) {
      return false;
    }
    
    const currentHour = moscowTime.getHours();
    return currentHour >= 10 && currentHour < 19;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): string {
    const now = new Date();
    const moscowTime = this.getMoscowTime(now);
    const currentTime = this.formatTime(moscowTime);
    const isTrading = this.isTradingTime();
    const shouldDaily = this.shouldSendDailyReport();
    const shouldWeekly = this.shouldSendWeeklyReport();
    const shouldCleanup = this.shouldCleanupTrades();
    
    return `üìÖ *–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞*\n\n` +
           `üïê *–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:* ${currentTime}\n` +
           `üìà *–¢–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è:* ${isTrading ? '–î–∞' : '–ù–µ—Ç'}\n` +
           `üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç:* ${shouldDaily ? '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ' : '–û–∂–∏–¥–∞–Ω–∏–µ'}\n` +
           `üìÖ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç:* ${shouldWeekly ? '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ' : '–û–∂–∏–¥–∞–Ω–∏–µ'}\n` +
           `üßπ *–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞:* ${shouldCleanup ? '–ì–æ—Ç–æ–≤–∞' : '–û–∂–∏–¥–∞–Ω–∏–µ'}`;
  }
}
