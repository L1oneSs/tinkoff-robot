#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ FIGI –ø–æ —Ç–∏–∫–µ—Ä—É
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx scripts/find-figi.ts SBER
 * npx tsx scripts/find-figi.ts VTBR
 * npx tsx scripts/find-figi.ts GAZP
 */

import { config } from 'dotenv';
import { TinkoffInvestApi } from 'tinkoff-invest-api';
import { InstrumentStatus } from 'tinkoff-invest-api/dist/generated/instruments.js';
import type { Share, Bond, Etf } from 'tinkoff-invest-api/dist/generated/instruments.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

function printInstruments(instruments: (Share | Bond | Etf)[]) {
  instruments.forEach((instrument, index) => {
    console.log(`üìä ${index + 1}. ${instrument.name}`);
    console.log(`   –¢–∏–∫–µ—Ä: ${instrument.ticker}`);
    console.log(`   FIGI: ${instrument.figi}`);
    console.log(`   –ö–ª–∞—Å—Å: ${(instrument as any).instrumentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    console.log(`   –í–∞–ª—é—Ç–∞: ${instrument.currency}`);
    console.log(`   –ë–∏—Ä–∂–∞: ${instrument.exchange}`);
    console.log(`   –¢–æ—Ä–≥–æ–≤–ª—è –¥–æ—Å—Ç—É–ø–Ω–∞: ${instrument.tradingStatus === 1 ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (instrument.lot) {
      console.log(`   –†–∞–∑–º–µ—Ä –ª–æ—Ç–∞: ${instrument.lot}`);
    }
    
    if (instrument.minPriceIncrement) {
      const minPrice = Number(instrument.minPriceIncrement.units) + Number(instrument.minPriceIncrement.nano) / 1000000000;
      console.log(`   –ú–∏–Ω. —à–∞–≥ —Ü–µ–Ω—ã: ${minPrice}`);
    }
    
    console.log('');
  });

  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –≤—ã–≤–æ–¥–∏–º FIGI –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  if (instruments.length === 1) {
    console.log(`üéØ FIGI –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${instruments[0].figi}`);
  }
}

async function searchInShares(api: TinkoffInvestApi, ticker: string) {
  const response = await api.instruments.shares({
    instrumentStatus: InstrumentStatus.INSTRUMENT_STATUS_BASE
  });
  
  return response.instruments.filter(instrument => 
    instrument.ticker.toUpperCase() === ticker.toUpperCase()
  );
}

async function searchInBonds(api: TinkoffInvestApi, ticker: string) {
  const response = await api.instruments.bonds({
    instrumentStatus: InstrumentStatus.INSTRUMENT_STATUS_BASE
  });
  
  return response.instruments.filter(instrument => 
    instrument.ticker.toUpperCase() === ticker.toUpperCase()
  );
}

async function searchInEtfs(api: TinkoffInvestApi, ticker: string) {
  const response = await api.instruments.etfs({
    instrumentStatus: InstrumentStatus.INSTRUMENT_STATUS_BASE
  });
  
  return response.instruments.filter(instrument => 
    instrument.ticker.toUpperCase() === ticker.toUpperCase()
  );
}

function validateInput(ticker: string): void {
  if (!ticker) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä. –ü—Ä–∏–º–µ—Ä: npx tsx scripts/find-figi.ts SBER');
    process.exit(1);
  }
}

function validateToken(): string {
  const token = (process.env.TINKOFF_TOKEN || process.env.TINKOFF_API_TOKEN)?.trim();
  if (!token) {
    console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TINKOFF_TOKEN –∏–ª–∏ TINKOFF_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
    process.exit(1);
  }
  return token;
}

async function searchInAllInstruments(api: TinkoffInvestApi, ticker: string) {
  // –ü–æ–∏—Å–∫ –≤ –∞–∫—Ü–∏—è—Ö
  const matchingShares = await searchInShares(api, ticker);
  if (matchingShares.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ü–∏–π: ${matchingShares.length}\n`);
    printInstruments(matchingShares);
    return true;
  }
  
  // –ü–æ–∏—Å–∫ –≤ –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö
  const matchingBonds = await searchInBonds(api, ticker);
  if (matchingBonds.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±–ª–∏–≥–∞—Ü–∏–π: ${matchingBonds.length}\n`);
    printInstruments(matchingBonds);
    return true;
  }

  // –ü–æ–∏—Å–∫ –≤ ETF
  const matchingEtfs = await searchInEtfs(api, ticker);
  if (matchingEtfs.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ETF: ${matchingEtfs.length}\n`);
    printInstruments(matchingEtfs);
    return true;
  }

  return false;
}

async function findFigi(ticker: string) {
  validateInput(ticker);
  const token = validateToken();

  try {
    console.log(`üîç –ü–æ–∏—Å–∫ FIGI –¥–ª—è —Ç–∏–∫–µ—Ä–∞: ${ticker.toUpperCase()}\n`);

    const api = new TinkoffInvestApi({
      token: token,
      appName: 'tinkoff-robot-figi-finder'
    });

    const found = await searchInAllInstruments(api, ticker);
    
    if (!found) {
      console.log(`‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å —Ç–∏–∫–µ—Ä–æ–º "${ticker}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ FIGI:', error);
  }
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const ticker = process.argv[2];
findFigi(ticker).catch(console.error);
