/**
 * –ë—ç–∫—Ç–µ—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
 * npx tsx scripts/run-backtest.ts SBER  - –¢–µ—Å—Ç –°–±–µ—Ä–±–∞–Ω–∫–∞
 * npx tsx scripts/run-backtest.ts GAZP  - –¢–µ—Å—Ç –ì–∞–∑–ø—Ä–æ–º–∞
 * 
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Tinkoff API –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 
 * –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
 */
import { Helpers } from 'tinkoff-invest-api';
import { api } from './init-api.js';
import { CandleInterval, HistoricCandle } from 'tinkoff-invest-api/dist/generated/marketdata.js';
import { InstrumentInfo, BaseInstrumentConfig, SignalContext } from '../src/instruments/base-config.js';
import { getActiveNewInstrumentConfigs } from '../src/instrument-configs.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
import { ProfitLossSignal } from '../src/signals/profit-loss.js';
import { 
  SmaCrossoverSignal,
  RsiCrossoverSignal,
  MacdSignal,
  EmaCrossoverSignal,
  BollingerBandsSignal,
  WilliamsRSignal,
  AcSignal,
  AoSignal,
  CciSignal,
  StochasticSignal,
  AdxSignal,
  PSARSignal,
  SuperTrendSignal,
  MoveSignal,
  RocSignal
} from '../src/signals/self-trading-indicators/index.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
import {
  HammerSignal,
  ShootingStarSignal,
  HaramiSignal,
  BullishEngulfingSignal,
  BearishEngulfingSignal,
  DojiSignal
} from '../src/signals/candlestick-patterns/index.js';

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
const BACKTEST_CONFIG = {
  // –ü–µ—Ä–∏–æ–¥ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π)
  daysBack: 21, // –ü–æ–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Å 7 –ø–æ 21 –∏—é–ª—è (21 –¥–µ–Ω—å –Ω–∞–∑–∞–¥ –æ—Ç —Å–µ–≥–æ–¥–Ω—è)
  // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
  initialBalance: 13000, // 13,000 —Ä—É–±–ª–µ–π
  // –ö–æ–º–∏—Å—Å–∏—è –±—Ä–æ–∫–µ—Ä–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
  commission: 0.3,
  // –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã –∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (10:00-19:00 –ú–°–ö, –ø–Ω-–ø—Ç)
  useRealTradingHours: true, // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–¥–µ–ª–∫–∞–º–∏ –≤ UTC
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å: CANDLE_INTERVAL_5_MIN, CANDLE_INTERVAL_1_HOUR, etc.)
  candleInterval: 'CANDLE_INTERVAL_5_MIN' as const,
  // –†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–Ω–µ–π) - API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 7 –¥–Ω–µ–π –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
  chunkSizeDays: 7,
};

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏
interface BacktestResult {
  instrument: string;
  ticker: string;
  totalTrades: number;
  profitableTrades: number;
  totalProfit: number;
  totalProfitPercent: number;
  maxDrawdown: number;
  sharpeRatio: number;
  trades: TradeRecord[];
  signalsSummary: SignalsSummary;
}

interface TradeRecord {
  date: Date;
  type: 'BUY' | 'SELL';
  price: number;
  quantity: number;
  amount: number;
  balance: number;
  profit?: number;
  signal: string;
}

interface SignalsSummary {
  [signalName: string]: {
    total: number;
    profitable: number;
    totalProfit: number;
  };
}

main();

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const ticker = process.argv[2];
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  const allConfigs = getActiveNewInstrumentConfigs();
  
  // –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–∫–µ—Ä—É
  const strategyConfig = allConfigs.find(s => s.ticker === ticker.toUpperCase());
  if (!strategyConfig) {
    console.error(`‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${ticker.toUpperCase()} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!`);
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${allConfigs.map(s => s.ticker).join(', ')}`);
    return;
  }
  
  console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${strategyConfig.figi} (${strategyConfig.ticker})`);
  console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${BACKTEST_CONFIG.daysBack} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`);
  console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${BACKTEST_CONFIG.initialBalance.toLocaleString()} —Ä—É–±.`);
  console.log(`üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${BACKTEST_CONFIG.commission}%`);
  console.log(`‚è∞ –¢–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è: ${BACKTEST_CONFIG.useRealTradingHours ? '10:00-19:00 –ú–°–ö (–ø–Ω-–ø—Ç)' : '24/7'}`);
  console.log(`ÔøΩ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π: 5 –º–∏–Ω—É—Ç (–∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)\n`);

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
  const instrumentInfo = await getInstrumentInfo(strategyConfig.figi);
  if (!instrumentInfo) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ!');
    return;
  }

  console.log(`üè∑Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${instrumentInfo.name} (${instrumentInfo.ticker})`);
  console.log(`üè≠ –°–µ–∫—Ç–æ—Ä: ${strategyConfig.sector}\n`);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
  const candles = await loadHistoricalDataInChunks(strategyConfig.figi, BACKTEST_CONFIG.candleInterval);
  if (candles.length === 0) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ!');
    return;
  }

  console.log(`üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–≤–µ—á–µ–π: ${candles.length}`);
  console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${candles[0].time?.toLocaleDateString()} - ${candles[candles.length - 1].time?.toLocaleDateString()}\n`);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
  const result = await runBacktest(strategyConfig, candles, instrumentInfo);
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  printResults(result);
}

async function getInstrumentInfo(figi: string): Promise<InstrumentInfo | null> {
  try {
    const { instrument } = await api.instruments.getInstrumentBy({ 
      idType: 1, // INSTRUMENT_ID_TYPE_FIGI
      classCode: '', 
      id: figi 
    });
    
    if (!instrument) return null;
    
    return {
      figi: instrument.figi,
      ticker: instrument.ticker,
      name: instrument.name,
      sector: 'Unknown', // –ü–æ–ª–µ sector –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ API
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ:', error);
    return null;
  }
}

async function loadHistoricalData(figi: string, interval: CandleInterval): Promise<HistoricCandle[]> {
  const to = new Date();
  const from = new Date();
  from.setDate(from.getDate() - BACKTEST_CONFIG.chunkSizeDays);

  console.log(`üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö: ${from.toLocaleDateString()} - ${to.toLocaleDateString()}...`);

  try {
    const { candles } = await api.marketdata.getCandles({
      figi,
      from,
      to,
      interval,
    });

    return candles;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ü–∏—è–º–∏ (–¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞)
async function loadHistoricalDataInChunks(figi: string, candleIntervalName: string): Promise<HistoricCandle[]> {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ enum
  const intervalMap: { [key: string]: CandleInterval } = {
    'CANDLE_INTERVAL_1_MIN': 1,
    'CANDLE_INTERVAL_5_MIN': 2, 
    'CANDLE_INTERVAL_15_MIN': 3,
    'CANDLE_INTERVAL_HOUR': 4,
    'CANDLE_INTERVAL_DAY': 5,
  };
  
  const interval = intervalMap[candleIntervalName];
  if (!interval) {
    throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π: ${candleIntervalName}`);
  }

  console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏...');
  
  const allCandles: HistoricCandle[] = [];
  const totalDays = BACKTEST_CONFIG.daysBack;
  const chunkSize = BACKTEST_CONFIG.chunkSizeDays;
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏ –æ—Ç —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É
  for (let daysAgo = totalDays; daysAgo > 0; daysAgo -= chunkSize) {
    const chunkEnd = Math.max(0, daysAgo - chunkSize);
    
    const to = new Date();
    to.setDate(to.getDate() - chunkEnd);
    
    const from = new Date();
    from.setDate(from.getDate() - daysAgo);
    
    console.log(`üì¶ –ü–æ—Ä—Ü–∏—è ${Math.ceil((totalDays - daysAgo + chunkSize) / chunkSize)}: ${from.toLocaleDateString()} - ${to.toLocaleDateString()}`);
    
    try {
      const { candles } = await api.marketdata.getCandles({
        figi,
        from,
        to,
        interval,
      });
      
      console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${candles.length} —Å–≤–µ—á–µ–π`);
      allCandles.push(...candles);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
      if (daysAgo > chunkSize) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ü–∏–∏ ${from.toLocaleDateString()} - ${to.toLocaleDateString()}:`, error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ü–∏–π
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≤–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
  allCandles.sort((a, b) => {
    const timeA = a.time?.getTime() || 0;
    const timeB = b.time?.getTime() || 0;
    return timeA - timeB;
  });
  
  console.log(`üéØ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${allCandles.length} —Å–≤–µ—á–µ–π`);
  return allCandles;
}

async function runBacktest(
  strategyConfig: BaseInstrumentConfig, 
  candles: HistoricCandle[], 
  instrumentInfo: InstrumentInfo
): Promise<BacktestResult> {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏...\n');
  
  let balance = BACKTEST_CONFIG.initialBalance;
  let position = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–æ–∑–∏—Ü–∏–∏
  let positionValue = 0; // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
  const trades: TradeRecord[] = [];
  const signalsSummary: SignalsSummary = {};
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  const signalInstances: { [key: string]: any } = {};
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è Strategy —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
  const mockStrategy = {
    logger: {
      withPrefix: (prefix: string) => ({
        debug: () => {},
        info: () => {},
        warn: () => {},
        error: () => {}
      })
    }
  } as any;
  
  if (strategyConfig.signals?.profit) {
    signalInstances.profit = new ProfitLossSignal(mockStrategy, strategyConfig.signals.profit);
  }
  if (strategyConfig.signals?.sma) {
    signalInstances.sma = new SmaCrossoverSignal(mockStrategy, strategyConfig.signals.sma);
  }
  if (strategyConfig.signals?.rsi) {
    signalInstances.rsi = new RsiCrossoverSignal(mockStrategy, strategyConfig.signals.rsi);
  }
  if (strategyConfig.signals?.macd) {
    signalInstances.macd = new MacdSignal(mockStrategy, strategyConfig.signals.macd);
  }
  if (strategyConfig.signals?.ema) {
    signalInstances.ema = new EmaCrossoverSignal(mockStrategy, strategyConfig.signals.ema);
  }
  if (strategyConfig.signals?.bollinger) {
    signalInstances.bollinger = new BollingerBandsSignal(mockStrategy, strategyConfig.signals.bollinger);
  }
  if (strategyConfig.signals?.williams) {
    signalInstances.williams = new WilliamsRSignal(mockStrategy, strategyConfig.signals.williams);
  }
  if (strategyConfig.signals?.ac) {
    signalInstances.ac = new AcSignal(mockStrategy, strategyConfig.signals.ac);
  }
  if (strategyConfig.signals?.ao) {
    signalInstances.ao = new AoSignal(mockStrategy, strategyConfig.signals.ao);
  }
  if (strategyConfig.signals?.cci) {
    signalInstances.cci = new CciSignal(mockStrategy, strategyConfig.signals.cci);
  }
  if (strategyConfig.signals?.stochastic) {
    signalInstances.stochastic = new StochasticSignal(mockStrategy, strategyConfig.signals.stochastic);
  }
  if (strategyConfig.signals?.adx) {
    signalInstances.adx = new AdxSignal(mockStrategy, strategyConfig.signals.adx);
  }
  if (strategyConfig.signals?.psar) {
    signalInstances.psar = new PSARSignal(mockStrategy, strategyConfig.signals.psar);
  }
  if (strategyConfig.signals?.supertrend) {
    signalInstances.supertrend = new SuperTrendSignal(mockStrategy, strategyConfig.signals.supertrend);
  }
  if (strategyConfig.signals?.move) {
    signalInstances.move = new MoveSignal(mockStrategy, strategyConfig.signals.move);
  }
  if (strategyConfig.signals?.roc) {
    signalInstances.roc = new RocSignal(mockStrategy, strategyConfig.signals.roc);
  }
  
  // –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  if (strategyConfig.signals?.hammer) {
    signalInstances.hammer = new HammerSignal(mockStrategy, strategyConfig.signals.hammer);
  }
  if (strategyConfig.signals?.shootingStar) {
    signalInstances.shootingStar = new ShootingStarSignal(mockStrategy, strategyConfig.signals.shootingStar);
  }
  if (strategyConfig.signals?.harami) {
    signalInstances.harami = new HaramiSignal(mockStrategy, strategyConfig.signals.harami);
  }
  if (strategyConfig.signals?.bullishEngulfing) {
    signalInstances.bullishEngulfing = new BullishEngulfingSignal(mockStrategy, strategyConfig.signals.bullishEngulfing);
  }
  if (strategyConfig.signals?.bearishEngulfing) {
    signalInstances.bearishEngulfing = new BearishEngulfingSignal(mockStrategy, strategyConfig.signals.bearishEngulfing);
  }
  if (strategyConfig.signals?.doji) {
    signalInstances.doji = new DojiSignal(mockStrategy, strategyConfig.signals.doji);
  }
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
  const minCandles = 50;
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  const isTradingTime = (date: Date): boolean => {
    if (!BACKTEST_CONFIG.useRealTradingHours) {
      return true; // –¢–æ—Ä–≥—É–µ–º 24/7 –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
    }
    
    // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    const moscowTime = new Date(date.toLocaleString("en-US", { timeZone: "Europe/Moscow" }));
    const dayOfWeek = moscowTime.getDay(); // 0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 = —Å—É–±–±–æ—Ç–∞
    const hour = moscowTime.getHours();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞) –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã (10:00-19:00)
    return (dayOfWeek >= 1 && dayOfWeek <= 5) && (hour >= 10 && hour < 19);
  };
  
  for (let i = minCandles; i < candles.length; i++) {
    const currentCandle = candles[i];
    const currentPrice = currentCandle.close ? Helpers.toNumber(currentCandle.close!) : 0;
    
    if (currentPrice === 0) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤–æ–µ –≤—Ä–µ–º—è (–∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    if (!isTradingTime(currentCandle.time || new Date())) {
      continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–Ω–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    }
    
    // –ë–µ—Ä–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–≤–µ—á–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    const candleHistory = candles.slice(0, i + 1);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
    const signalResults: { [key: string]: 'buy' | 'sell' | void } = {};
    let currentBalance = balance + (position > 0 ? position * currentPrice : 0);
    
    for (const [signalName, signalInstance] of Object.entries(signalInstances)) {
      if (signalName === 'profit' && position > 0) {
        // –î–ª—è profit/loss –Ω—É–∂–Ω–∞ —Ç–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å
        const currentProfit = ((position * currentPrice - positionValue) / positionValue) * 100;
        signalResults[signalName] = signalInstance.calc({ 
          candles: candleHistory, 
          profit: currentProfit 
        });
      } else if (signalName !== 'profit') {
        signalResults[signalName] = signalInstance.calc({ 
          candles: candleHistory, 
          profit: 0 
        });
      }
    }
    
    // –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 50 —Å–≤–µ—á–µ–π –∏–ª–∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const shouldShowDebug = (i % 50 === 0) || Object.values(signalResults).some(r => r === 'buy' || r === 'sell');
    const tradingTimeStatus = isTradingTime(currentCandle.time || new Date()) ? 'üü¢' : 'üî¥';
    
    if (shouldShowDebug) {
      console.log(`–°–≤–µ—á–∞ ${i} (${currentCandle.time?.toLocaleString()}) ${tradingTimeStatus}: –¶–µ–Ω–∞=${currentPrice.toFixed(2)}, –ü–æ–∑–∏—Ü–∏—è=${position}`);
      console.log(`  –°–∏–≥–Ω–∞–ª—ã:`, signalResults);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    const signalContext: SignalContext = {
      profit: () => signalResults.profit === 'sell', 
      sma: () => signalResults.sma === 'buy',
      rsi: () => signalResults.rsi === 'buy', 
      bollinger: () => signalResults.bollinger === 'buy',
      macd: () => signalResults.macd === 'buy',
      ema: () => signalResults.ema === 'buy',
      cci: () => signalResults.cci === 'buy',
      stochastic: () => signalResults.stochastic === 'buy',
      williams: () => signalResults.williams === 'buy',
      adx: () => signalResults.adx === 'buy',
      psar: () => signalResults.psar === 'buy',
      supertrend: () => signalResults.supertrend === 'buy',
      move: () => signalResults.move === 'buy',
      roc: () => signalResults.roc === 'buy',
      ac: () => signalResults.ac === 'buy',
      ao: () => signalResults.ao === 'buy',
      
      // –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      hammer: () => signalResults.hammer === 'buy',
      shootingStar: () => signalResults.shootingStar === 'sell', // ShootingStar - –º–µ–¥–≤–µ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
      harami: () => signalResults.harami === 'buy',
      bullishEngulfing: () => signalResults.bullishEngulfing === 'buy',
      bearishEngulfing: () => signalResults.bearishEngulfing === 'sell', // BearishEngulfing - –º–µ–¥–≤–µ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
      doji: () => signalResults.doji === 'buy'
    };
    
    // –¢–∞–∫–∂–µ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è sell —Å–∏–≥–Ω–∞–ª–æ–≤
    const sellSignalContext: SignalContext = {
      profit: () => signalResults.profit === 'sell', 
      sma: () => signalResults.sma === 'sell',
      rsi: () => signalResults.rsi === 'sell', 
      bollinger: () => signalResults.bollinger === 'sell',
      macd: () => signalResults.macd === 'sell',
      ema: () => signalResults.ema === 'sell',
      cci: () => signalResults.cci === 'sell',
      stochastic: () => signalResults.stochastic === 'sell',
      williams: () => signalResults.williams === 'sell',
      adx: () => signalResults.adx === 'sell',
      psar: () => signalResults.psar === 'sell',
      supertrend: () => signalResults.supertrend === 'sell',
      move: () => signalResults.move === 'sell',
      roc: () => signalResults.roc === 'sell',
      ac: () => signalResults.ac === 'sell',
      ao: () => signalResults.ao === 'sell',
      
      // –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
      hammer: () => signalResults.hammer === 'sell',
      shootingStar: () => signalResults.shootingStar === 'sell',
      harami: () => signalResults.harami === 'sell', 
      bullishEngulfing: () => signalResults.bullishEngulfing === 'sell',
      bearishEngulfing: () => signalResults.bearishEngulfing === 'sell',
      doji: () => signalResults.doji === 'sell'
    };
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const buySignal = strategyConfig.triggers?.buySignal(signalContext);
    const sellSignal = strategyConfig.triggers?.sellSignal(sellSignalContext);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Å–∏–≥–Ω–∞–ª —Å—Ä–∞–±–æ—Ç–∞–ª (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
    let triggerSignal = 'unknown';
    if (buySignal) {
      // –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ buy —Å–∏–≥–Ω–∞–ª—ã
      for (const [signalName, result] of Object.entries(signalResults)) {
        if (result === 'buy' && signalContext[signalName as keyof SignalContext]?.()) {
          triggerSignal = signalName;
          break;
        }
      }
    } else if (sellSignal) {
      // –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ sell —Å–∏–≥–Ω–∞–ª—ã
      for (const [signalName, result] of Object.entries(signalResults)) {
        if (result === 'sell' && sellSignalContext[signalName as keyof SignalContext]?.()) {
          triggerSignal = signalName;
          break;
        }
      }
    }
    
    // –ü–æ–∫—É–ø–∫–∞ (–µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏)
    if (buySignal && position === 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
      const lotSize = strategyConfig.orderLots || 1;
      const commission = (lotSize * currentPrice) * (BACKTEST_CONFIG.commission / 100);
      const totalCost = (lotSize * currentPrice) + commission;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
      if (balance >= totalCost) {
        balance -= totalCost;
        position = lotSize;
        positionValue = lotSize * currentPrice;
        
        const trade: TradeRecord = {
          date: currentCandle.time || new Date(),
          type: 'BUY',
          price: currentPrice,
          quantity: lotSize,
          amount: totalCost,
          balance,
          signal: triggerSignal
        };
        
        trades.push(trade);
        
        console.log(`üü¢ –ü–û–ö–£–ü–ö–ê | ${trade.date.toLocaleDateString()}, ${trade.date.toLocaleTimeString()} | ${lotSize}x${currentPrice.toFixed(2)} = ${totalCost.toFixed(2)} —Ä—É–±. | –ü–æ–∑–∏—Ü–∏—è: ${position} | –°–∏–≥–Ω–∞–ª: ${triggerSignal}`);
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ${lotSize} –ª–æ—Ç–æ–≤ –ø–æ ${currentPrice.toFixed(2)} —Ä—É–±.`);
      }
    }
    
    // –ü—Ä–æ–¥–∞–∂–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è)
    else if (sellSignal && position > 0) {
      const grossAmount = position * currentPrice;
      const commission = grossAmount * (BACKTEST_CONFIG.commission / 100);
      const netAmount = grossAmount - commission;
      const profit = netAmount - positionValue;
      
      balance += netAmount;
      
      const trade: TradeRecord = {
        date: currentCandle.time || new Date(),
        type: 'SELL',
        price: currentPrice,
        quantity: position,
        amount: netAmount,
        balance,
        profit,
        signal: triggerSignal
      };
      
      trades.push(trade);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
      if (!signalsSummary[triggerSignal]) {
        signalsSummary[triggerSignal] = { total: 0, profitable: 0, totalProfit: 0 };
      }
      signalsSummary[triggerSignal].total++;
      signalsSummary[triggerSignal].totalProfit += profit;
      if (profit > 0) {
        signalsSummary[triggerSignal].profitable++;
      }
      
      console.log(`üî¥ –ü–†–û–î–ê–ñ–ê | ${trade.date.toLocaleDateString()}, ${trade.date.toLocaleTimeString()} | ${position}x${currentPrice.toFixed(2)} = ${netAmount.toFixed(2)} —Ä—É–±. | –ü—Ä–∏–±—ã–ª—å: ${profit.toFixed(2)} —Ä—É–±. | –°–∏–≥–Ω–∞–ª: ${triggerSignal}`);
      
      position = 0;
      positionValue = 0;
    }
  }
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalProfit = balance - BACKTEST_CONFIG.initialBalance;
  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫ –±–∞–ª–∞–Ω—Å—É (–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É)
  const finalBalance = balance + (position > 0 ? position * (candles[candles.length - 1].close ? Helpers.toNumber(candles[candles.length - 1].close!) : 0) : 0);
  const finalProfit = finalBalance - BACKTEST_CONFIG.initialBalance;
  const totalProfitPercent = (finalProfit / BACKTEST_CONFIG.initialBalance) * 100;
  const profitableTrades = trades.filter(t => t.type === 'SELL' && t.profit! > 0).length;
  const sellTrades = trades.filter(t => t.type === 'SELL').length;
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
  let maxDrawdown = 0;
  let peak = BACKTEST_CONFIG.initialBalance;
  let currentBalance = BACKTEST_CONFIG.initialBalance;
  
  for (const trade of trades) {
    currentBalance = trade.balance + (position * trade.price);
    if (currentBalance > peak) {
      peak = currentBalance;
    }
    const drawdown = ((peak - currentBalance) / peak) * 100;
    if (drawdown > maxDrawdown) {
      maxDrawdown = drawdown;
    }
  }
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
  const returns = trades.filter(t => t.type === 'SELL').map(t => t.profit! / BACKTEST_CONFIG.initialBalance);
  const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;
  const variance = returns.reduce((a, b) => a + Math.pow(b - avgReturn, 2), 0) / returns.length;
  const stdDev = Math.sqrt(variance);
  const sharpeRatio = stdDev === 0 ? 0 : avgReturn / stdDev;
  
  return {
    instrument: instrumentInfo.name,
    ticker: instrumentInfo.ticker,
    totalTrades: sellTrades,
    profitableTrades,
    totalProfit: finalProfit,
    totalProfitPercent,
    maxDrawdown,
    sharpeRatio,
    trades,
    signalsSummary
  };
}

function printResults(result: BacktestResult) {
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê');
  console.log('='.repeat(60));
  
  console.log(`üè∑Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${result.instrument} (${result.ticker})`);
  console.log(`üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${BACKTEST_CONFIG.initialBalance.toLocaleString()} —Ä—É–±.`);
  console.log(`üíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${(BACKTEST_CONFIG.initialBalance + result.totalProfit).toLocaleString()} —Ä—É–±.`);
  console.log(`üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${result.totalProfit.toFixed(2)} —Ä—É–±. (${result.totalProfitPercent.toFixed(2)}%)`);
  console.log(`üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${result.totalTrades}`);
  console.log(`‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${result.profitableTrades} (${result.totalTrades > 0 ? (result.profitableTrades / result.totalTrades * 100).toFixed(1) : 0}%)`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
  const hasPendingPosition = result.trades.filter(t => t.type === 'BUY').length > result.trades.filter(t => t.type === 'SELL').length;
  if (hasPendingPosition) {
    console.log(`üìã –ï—Å—Ç—å –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è (—É—á—Ç–µ–Ω–∞ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω–µ)`);
  }
  
  console.log(`üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: ${result.maxDrawdown.toFixed(2)}%`);
  console.log(`üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: ${result.sharpeRatio.toFixed(2)}`);
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º:`);
  for (const [signal, stats] of Object.entries(result.signalsSummary)) {
    const winRate = stats.total > 0 ? (stats.profitable / stats.total * 100).toFixed(1) : '0';
    console.log(`  ${signal}: ${stats.total} —Å–¥–µ–ª–æ–∫, ${stats.profitable} –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö (${winRate}%), –ø—Ä–∏–±—ã–ª—å: ${stats.totalProfit.toFixed(2)} —Ä—É–±.`);
  }
  
  // –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫
  console.log(`\nüìã –î–ï–¢–ê–õ–ò –í–°–ï–• –°–î–ï–õ–û–ö:`);
  console.log('='.repeat(60));
  
  if (result.trades.length === 0) {
    console.log('‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ');
  } else {
    let currentProfit = 0;
    for (let i = 0; i < result.trades.length; i++) {
      const trade = result.trades[i];
      const dateStr = trade.date.toLocaleDateString('ru-RU');
      const timeStr = trade.date.toLocaleTimeString('ru-RU');
      
      if (trade.type === 'BUY') {
        console.log(`${i + 1}. üü¢ –ü–û–ö–£–ü–ö–ê | ${dateStr} ${timeStr}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.quantity} —à—Ç.`);
        console.log(`   –¶–µ–Ω–∞: ${trade.price.toFixed(2)} —Ä—É–±.`);
        console.log(`   –°—É–º–º–∞: ${trade.amount.toFixed(2)} —Ä—É–±. (—Å –∫–æ–º–∏—Å—Å–∏–µ–π)`);
        console.log(`   –°–∏–≥–Ω–∞–ª: ${trade.signal}`);
        console.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: ${trade.balance.toFixed(2)} —Ä—É–±.`);
      } else {
        currentProfit += trade.profit || 0;
        const profitIcon = (trade.profit || 0) > 0 ? 'üìà' : 'üìâ';
        console.log(`${i + 1}. üî¥ –ü–†–û–î–ê–ñ–ê | ${dateStr} ${timeStr}`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${trade.quantity} —à—Ç.`);
        console.log(`   –¶–µ–Ω–∞: ${trade.price.toFixed(2)} —Ä—É–±.`);
        console.log(`   –°—É–º–º–∞: ${trade.amount.toFixed(2)} —Ä—É–±. (–ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏)`);
        console.log(`   –°–∏–≥–Ω–∞–ª: ${trade.signal}`);
        console.log(`   ${profitIcon} –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${(trade.profit || 0).toFixed(2)} —Ä—É–±.`);
        console.log(`   –ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${currentProfit.toFixed(2)} —Ä—É–±.`);
        console.log(`   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏: ${trade.balance.toFixed(2)} —Ä—É–±.`);
      }
      console.log('');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  const lastCandle = result.trades.length > 0 ? result.trades[result.trades.length - 1] : null;
  if (lastCandle && result.trades.filter(t => t.type === 'BUY').length > result.trades.filter(t => t.type === 'SELL').length) {
    console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏!`);
    console.log(`   –ò—Ö —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á—Ç–µ–Ω–∞ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –±–∞–ª–∞–Ω—Å–µ.`);
    console.log('');
  }
  
  if (result.totalProfit > 0) {
    console.log(`\nüéâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`);
  } else {
    console.log(`\n‚ö†Ô∏è  –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.`);
  }
  
  console.log('='.repeat(60));
}
