/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
 */

import { 
  INSTRUMENT_CONFIGS, 
  getActiveInstrumentConfigs
} from '../src/instrument-configs.js';
import { INSTRUMENTS, getInstrumentByFigi } from '../src/instruments.js';

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
 */
function showAllInstruments() {
  console.log('üîç === –û–ë–ó–û–† –í–°–ï–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ===\n');
  
  Object.values(INSTRUMENT_CONFIGS).forEach(config => {
    const instrument = getInstrumentByFigi(config.figi);
    const status = config.enabled ? '‚úÖ –ê–ö–¢–ò–í–ï–ù' : '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù';
    const signalsCount = config.signals ? Object.keys(config.signals).length : 0;
    
    console.log(`${status} ${instrument?.ticker} (${instrument?.name})`);
    console.log(`   –°–µ–∫—Ç–æ—Ä: ${instrument?.sector}`);
    console.log(`   –õ–æ—Ç—ã: ${config.orderLots}, –ö–æ–º–∏—Å—Å–∏—è: ${config.brokerFee}%`);
    console.log(`   –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${config.interval}, –°–∏–≥–Ω–∞–ª–æ–≤: ${signalsCount}`);
    
    if (config.signals && signalsCount > 0) {
      console.log(`   –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ${Object.keys(config.signals).join(', ')}`);
    }
    console.log('');
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
 */
function showActiveInstruments() {
  console.log('‚úÖ === –ê–ö–¢–ò–í–ù–´–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ ===\n');
  
  const active = getActiveInstrumentConfigs();
  console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${active.length}\n`);
  
  active.forEach(config => {
    const instrument = getInstrumentByFigi(config.figi);
    const signalsCount = config.signals ? Object.keys(config.signals).length : 0;
    
    console.log(`üìà ${instrument?.ticker} - ${instrument?.name}`);
    console.log(`   –°–µ–∫—Ç–æ—Ä: ${instrument?.sector}`);
    console.log(`   –°–∏–≥–Ω–∞–ª–æ–≤: ${signalsCount}`);
    if (config.signals) {
      console.log(`   –¢–∏–ø—ã: ${Object.keys(config.signals).join(', ')}`);
    }
    console.log('');
  });
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
 */
function showInstrumentDetails(ticker: string) {
  const instrument = INSTRUMENTS[ticker];
  if (!instrument) {
    console.log(`‚ùå –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return;
  }
  
  const config = INSTRUMENT_CONFIGS[instrument.figi];
  if (!config) {
    console.log(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è ${ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return;
  }
  
  console.log(`üìä === –î–ï–¢–ê–õ–ò: ${ticker} ===\n`);
  console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${instrument.name}`);
  console.log(`FIGI: ${instrument.figi}`);
  console.log(`–°–µ–∫—Ç–æ—Ä: ${instrument.sector}`);
  console.log(`–°—Ç–∞—Ç—É—Å: ${config.enabled ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}`);
  console.log(`–õ–æ—Ç—ã: ${config.orderLots}`);
  console.log(`–ö–æ–º–∏—Å—Å–∏—è: ${config.brokerFee}%`);
  console.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${config.interval}\n`);
  
  if (config.signals) {
    console.log('üéØ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã:');
    Object.entries(config.signals).forEach(([type, signalConfig]) => {
      console.log(`  ‚Ä¢ ${type}:`, JSON.stringify(signalConfig, null, 4));
    });
  } else {
    console.log('üéØ –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º
 */
function showSectorStats() {
  console.log('üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ï–ö–¢–û–†–ê–ú ===\n');
  
  const sectors: Record<string, { total: number; active: number; tickers: string[] }> = {};
  
  Object.values(INSTRUMENT_CONFIGS).forEach(config => {
    const instrument = getInstrumentByFigi(config.figi);
    if (instrument) {
      if (!sectors[instrument.sector]) {
        sectors[instrument.sector] = { total: 0, active: 0, tickers: [] };
      }
      sectors[instrument.sector].total++;
      sectors[instrument.sector].tickers.push(instrument.ticker);
      if (config.enabled) {
        sectors[instrument.sector].active++;
      }
    }
  });
  
  Object.entries(sectors).forEach(([sector, stats]) => {
    console.log(`üè≠ ${sector}:`);
    console.log(`   –í—Å–µ–≥–æ: ${stats.total}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active}`);
    console.log(`   –¢–∏–∫–µ—Ä—ã: ${stats.tickers.join(', ')}`);
    console.log('');
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];
const argument = process.argv[3];

switch (command) {
  case 'all':
    showAllInstruments();
    break;
  case 'active':
    showActiveInstruments();
    break;
  case 'details':
    if (argument) {
      showInstrumentDetails(argument.toUpperCase());
    } else {
      console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä: npm run config details SBER');
    }
    break;
  case 'sectors':
    showSectorStats();
    break;
  default:
    console.log(`
üîß === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø–ú–ò ===

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run config <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç]

–ö–æ–º–∞–Ω–¥—ã:
  all      - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  active   - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã  
  details  - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç —Ç–∏–∫–µ—Ä)
  sectors  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º

–ü—Ä–∏–º–µ—Ä—ã:
  npm run config all
  npm run config active
  npm run config details SBER
  npm run config sectors
`);
}
